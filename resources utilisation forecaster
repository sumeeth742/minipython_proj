

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

class Resource:
    def __init__(self, name, type, capacity):
        self.name = name
        self.type = type
        self.capacity = capacity

class Utilization:
    def __init__(self, timestamp, resource_id, usage):
        self.timestamp = timestamp
        self.resource_id = resource_id
        self.usage = usage

class Forecast:
    def __init__(self, timestamp, resource_id, predicted_usage):
        self.timestamp = timestamp
        self.resource_id = resource_id
        self.predicted_usage = predicted_usage

class Model:
    def __init__(self, model_type):
        self.model_type = model_type
        self.model = None

    def train(self, data):
        X_train, X_test, y_train, y_test = train_test_split(data['timestamp'], data['usage'], test_size=0.2)
        if self.model_type == 'linear_regression':
            self.model = LinearRegression()
            self.model.fit(X_train.values.reshape(-1, 1), y_train.values)
        else:
            raise ValueError('Unsupported model type')

    def predict(self, input_data):
        return self.model.predict(input_data.values.reshape(-1, 1))

# Example usage
resource = Resource('CPU', 'compute', 100)
utilization_data = pd.DataFrame({
    'timestamp': [1, 2, 3, 4, 5],
    'resource_id': [resource.name] * 5,
    'usage': [20, 30, 40, 50, 60]
})

model = Model('linear_regression')
model.train(utilization_data)

forecast_input = pd.DataFrame({'timestamp': [6]})
forecast = model.predict(forecast_input)
print(f'Forecasted usage: {forecast[0]}')

forecast_input = pd.DataFrame({'timestamp': [7]})
forecast = model.predict(forecast_input)
print(f'Forecasted usage: {forecast[0]}')

forecast_input = pd.DataFrame({'timestamp': [8]})
forecast = model.predict(forecast_input)
print(f'Forecasted usage: {forecast[0]}')

